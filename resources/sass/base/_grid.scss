@mixin column($cols, $center-column: 'false') {
    $value: column-value($cols);
    flex: 0 0 $value;
    margin-left: $grid-gutter / 2;
    margin-right: $grid-gutter / 2;
    margin-top: $spacing-4;
    margin-bottom: $spacing-4;
    max-width: calc(#{$value} - #{$grid-gutter});
    min-height: 1px;
    position: relative;
}

@mixin container() {
    margin-left: auto;
    margin-right: auto;
    padding-left: $grid-gutter / -2;
    padding-left: $grid-gutter / -2;
    width: 100%;
}

@mixin row() {
    align-content: flex-start;
    align-items: flex-end;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: flex-start;
}

/// .container --locked

.container {
    @include container;

    @include m {
        &locked {
            @include container;
            max-width: $browser-max-size;
        }
    }
}

/// .row --center --column
.row {
    @include row;

    .row {
        margin-left: -($grid-gutter / 2);
        margin-right: -($grid-gutter / 2);
    }

    @include m {
        &center {
            justify-content: center;
        }

        &column {
            flex-direction: column;
        }
    }
}

/// .pull|left .pull|right
.pull {
    @include p {
        &right {
            margin-left: auto;
            margin-right: 0;
        }

        &left {
            margin-left: 0;
            margin-right: auto;
        }
    }
}

/// .order|first .order|last
.order {
    @include p {
        &last { order: ($grid-columns) + 1; }
        &first { order: -1; }
    }
}

@include mq('col') {
    @include column(auto);
}

/// col-x --centered
@for $i from 1 through $grid-columns {
    @include mq('col') {
        &-#{$i} {
            @include column($i);

            @if ($i >= 2 and $i % 2 == 0) {
                &-centered {
                    @include column($i);
                    $offset-cols: ($grid-columns - $i) / 2;

                    @if ($offset-cols > 0) {
                        margin-left: offset-value($offset-cols);
                    }
                }
            }
        }
    }
    @include mq('offset') {
        &-#{$i} {
            margin-left: offset-value($i) !important;
        }
    }
}
