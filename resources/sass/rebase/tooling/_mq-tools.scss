$_mq: (
   'xs-and-up': "min-width: 0px",
   'sm-and-up': "min-width: #{map-get($mq-list, 'sm')}",
   'md-and-up': "min-width: #{map-get($mq-list, 'md')}",
   'wd-and-up': "min-width: #{map-get($mq-list, 'wd')}",
   'xw-and-up': "min-width: #{map-get($mq-list, 'xw')}",
   'lg-and-up': "min-width: #{map-get($mq-list, 'lg')}",
   'xl-and-up': "min-width: #{map-get($mq-list, 'xl')}",
);

//
// Mobile First
//
$xs-and-up: map-get($_mq, 'xs-and-up');
$sm-and-up: map-get($_mq, 'sm-and-up');
$md-and-up: map-get($_mq, 'md-and-up');
$wd-and-up: map-get($_mq, 'wd-and-up');
$xw-and-up: map-get($_mq, 'xw-and-up');
$lg-and-up: map-get($_mq, 'lg-and-up');
$xl-and-up: map-get($_mq, 'xl-and-up');


@mixin mq($name, $as-modifier: false) {
    @if ($as-modifier) {
        &#{$name} {
            @content;
         }

         @each $k, $v in $mq-list {
            @include for-mq($k, $name, true) {
                @content;
            }
         }
    } @else {
        .#{$name} {
            @content;
         }

         @each $k, $v in $mq-list {
            @include for-mq($k, $name) {
                @content;
            }
         }
    }

}


@mixin for-mq($query, $name, $as-modifier: false) {
    @if ($as-modifier) {
        @media(map-get($_mq, '#{$query}-and-up')) {
            &#{$query} {
                @include _q_{
                    &#{$name} { @content; }
                }
            }
        }
    } @else {
        @media(map-get($_mq, '#{$query}-and-up')) {
            .#{$query} {
                @include _q_{
                    &#{$name} { @content; }
                }
            }
        }
    }

}

@mixin mq-at($name, $parent: &) {
    $parent: #{$parent};
    $dotPosition: str-index($parent, '.');

    @if ($dotPosition == 1) {
        $parent: str-slice($parent, 2);
    }

    @at-root {
        @include for-mq($name, $parent) {
            @content;
        }
    }
}
